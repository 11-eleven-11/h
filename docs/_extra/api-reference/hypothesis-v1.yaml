openapi: 3.0.0
# -----------------------------------------------------------------------------
# API metadata
# -----------------------------------------------------------------------------
info:
  title: Hypothesis API
  version: 1.0.0
  termsOfService: https://hypothes.is/terms-of-service
  license:
    name: BSD (2-Clause)
    url: https://github.com/hypothesis/h/blob/master/LICENSE
  description: |

    # Introduction

    This is a reference for the Hypothesis HTTP API version 1.0.
    See [the API overview](../api/) for an introduction to the API and information
    on how authorization works.

    ## API Versions

    TBD

    ## Errors

    The API uses standard HTTP status codes to indicate the success or failure
    of requests. The body of the response will be JSON in the following format:

    ```
    {
      "status": "failure",
      "reason": "a human-readable string about what went wrong"
    }
    ```

    ## Expanding Resources

    Resources often contain links to related resources in their response bodies.
    Some endpoints support resource expansion, allowing those related resources
    to be expanded inline within the response.

    To expand resources (where supported), use the `expand` request parameter.
    Documentation for endpoints identify which resources are expandable, if any.

    ```
    GET /api/things?expand=organization&expand=foobar
    ```

    Values for `expand` are the fields to expand. The above would expand
    `organization` and `foobar` fields within the (hypothetical) returned `thing`
    objects. You can expand multiple fields by providing multiple values in the
    `expand` Array.

servers:
  - url: https://api.hypothes.is/api

# -----------------------------------------------------------------------------
# Reusable tags for grouping operations
# -----------------------------------------------------------------------------
tags:
  - name: general
  - name: annotations
  - name: groups
  - name: profile
  - name: users

# -----------------------------------------------------------------------------
# Reusable components
# -----------------------------------------------------------------------------
components:

  # -------------------------
  # Reusable parameters
  # -------------------------
  parameters:
    AnnotationID:
      name: id
      in: path
      required: true
      schema:
        description: The annotation's unique identifier
        type: string
    GroupID:
      name: id
      in: path
      required: true
      schema:
        description: >
          Either a unique identifier generated by the service or an authority-provided identifier
        oneOf:
          - type: string
            description: A short string — the group ID assigned by the service
            example: 4j7Dko3R
          - type: string
            pattern: "group:[a-zA-Z0-9._\\-+!~*()']{1,1024}@.*$"
            description: Unique identifier assigned by the group's owning authority
            example: "group:338facc93@myauthority.net"
    GroupExpand:
      name: expand
      in: query
      required: false
      description: >
        One or more relations to expand for a group resource
      schema:
        type: array
        items:
          type: string
          enum:
            - organization
            - scopes
    Username:
      name: username
      in: path
      required: true
      description: >
        The user's username
      schema:
        type: string

  # -------------------------
  # Reusable responses
  # -------------------------
  responses:
    Conflict:
      description: >
        An error indicating a resource conflict, typically because a
        duplicate resource already exists.
      content:
        application/*json:
          schema:
            $ref: './schemas/errors.yaml#/Conflict'
    NotFound:
      description: >
        The specified resource was not found, or you do not have permission
        to access it


  # --------------------------
  # Resusable security schemes
  # --------------------------
  securitySchemes:

    AuthClient:
      type: http
      scheme: basic
      description: >
        An AuthClient is a special registered set of credentials associated with a
        particular "authority", (typically formatted as a domain, e.g. `myauthority.com`).
        Requests authenticated in this manner allow the retrieval and manipulation
        of resources (e.g. users, groups) across an entire authority, not just for
        a single authenticated user.

        These credentials must be pre-registered with the service provider.

    AuthClientForwardedUser:
      type: apiKey
      in: header
      name: X-Forwarded-User
      description: >
        May only be used in conjunction with AuthClient authentication. Allows
        requests with AuthClient authentication to perform actions "on behalf of"
        users within the registered authority. The value of this header should be
        the userid of the intended forwarded user, e.g. `acct:username@myauthority.net`

    ApiKey:
      type: http
      scheme: bearer
      description: >
        An API key corresponds to a single user. Requests authenticated in this
        manner may retrieve and manipulate resources based on the authorization
        of the associated user.

  # ------------------------------
  # Resusable resource schemas
  # ------------------------------
  schemas:
    Annotation:
      $ref: './schemas/annotation-schema.json'
    AnnotationCreate:
      $ref: './schemas/annotation-schema.json'
    Group:
      $ref: './schemas/group.yaml#/Group'
    GroupCreate:
      $ref: './schemas/group-new.yaml#/Group'
    GroupUpdate:
      $ref: './schemas/group-update.yaml#/Group'
    Profile:
      $ref: './schemas/profile.yaml#/Profile'
    User:
      $ref: './schemas/user.yaml#/User'
    UserCreate:
      $ref: './schemas/user-new.yaml#/User'
    UserUpdate:
      $ref: './schemas/user-update.yaml#/User'


# -----------------------------------------------------------------------------
# API OPERATIONS
# -----------------------------------------------------------------------------
paths:

  # ---------------------------------------------------------------------------
  # Operations on Annotation collections
  # ---------------------------------------------------------------------------
  /annotations:

    post:
      tags:
        - annotations
      summary: Create a new annotation
      security:
        - ApiKey: []
      requestBody:
          description: Full representation of Annotation resource
          required: true
          content:
            application/*json:
              schema:
                $ref: '#/components/schemas/AnnotationCreate'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Annotation'

  # ---------------------------------------------------------------------------
  # Operations on single Annotation resources
  # ---------------------------------------------------------------------------
  /annotations/{id}:

    # -----------------------------------------------------
    # GET annotations/{id} - Fetch an Annotation
    # -----------------------------------------------------
    get:
      tags:
        - annotations
      summary: Fetch an Annotation
      security:
        - ApiKey: []
        - {} # Unauthenticated OK, depending on annotation status
      parameters:
        - $ref: '#/components/parameters/AnnotationID'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Annotation'
        '404':
          $ref: '#/components/responses/NotFound'

    # ------------------------------------------------------------------
    # PATCH annotations/{id} - Update an Annotation (PUT also supported)
    # ------------------------------------------------------------------
    patch:
      tags:
        - annotations
      summary: Update an Annotation
      description: >
        This endpoint is available under both the `PATCH` and `PUT`
        request methods. Both endpoints have PATCH-characteristics
        as defined in [RFC5789](https://tools.ietf.org/html/rfc5789#section-1),
        meaning the request body does not have to include the whole annotation
        object.

        New implementations should use the `PATCH` request method, and existing
        implementations continue to work under `PUT` but should switch to `PATCH`.
      security:
        - ApiKey: []
      parameters:
        - $ref: '#/components/parameters/AnnotationID'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Annotation'
        '404':
          $ref: '#/components/responses/NotFound'

    # ------------------------------------------------------------------
    # DELETE annotations/{id} - Delete an Annotation
    # ------------------------------------------------------------------
    delete:
      tags:
        - annotations
      summary: Delete an Annotation
      security:
        - ApiKey: []
      parameters:
        - $ref: '#/components/parameters/AnnotationID'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - deleted
                  - id
                properties:
                  deleted:
                    type: boolean
                    enum:
                      - true
                  id:
                    type: string
        '404':
          $ref: '#/components/responses/NotFound'

  # ---------------------------------------------------------------------------
  # Operations on Group collections
  # ---------------------------------------------------------------------------

  /groups:
    # -----------------------------------------------------
    # GET groups - Fetch a filtered list of Groups
    # -----------------------------------------------------
    get:
      tags:
        - groups
      summary: Get a list of Groups
      description: >
        Retrieve a list of applicable Groups, filtered by authority and target
        document (`document_uri`). Also retrieve user's private Groups.
      security:
        - ApiKey: []
        - {} # Unauthenticated OK

      parameters:
        - name: authority
          in: query
          description: >
            Filter returned groups to this authority. For authenticated requests,
            the user's associated authority will supersede any provided value.
          required: false
          schema:
            type: string
            default: "hypothes.is"
        - name: document_uri
          in: query
          description: >
            Only retrieve public (i.e. non-private) groups that apply to a
            given document URI (i.e. the target document being annotated).
          required: false
          schema:
            type: string
            format: uri
        - $ref: '#/components/parameters/GroupExpand'

      responses:
        '200':
          description: Success
          content:
            application/*json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
    post:
      tags:
        - groups
      summary: Create a new group
      description: >
        Create a new, private group for the currently-authenticated user.
      security:
        - AuthClientForwardedUser: []
        - ApiKey: []

      requestBody:
          description: Full representation of Group resource
          required: true
          content:
            application/*json:
              schema:
                $ref: '#/components/schemas/GroupCreate'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '409':
          $ref: '#/components/responses/Conflict'


  # ---------------------------------------------------------------------------
  # Operations on individual Group resources
  # ---------------------------------------------------------------------------
  /groups/{id}:
    parameters:
      - $ref: '#/components/parameters/GroupID'

    # -----------------------------------------------------
    # GET groups/{id} - Fetch a Group
    # -----------------------------------------------------
    get:
      tags:
        - groups
      summary: Fetch a Group
      description: >
        Fetch a single Group resource.
      security:
        - AuthClient: []
        - ApiKey: []
        - {} # Unauthenticated OK
      parameters:
        - $ref: '#/components/parameters/GroupExpand'

      responses:
        '200':
          description: Success
          content:
            application/*json:
              schema:
                $ref: '#/components/schemas/Group'
        '404':
          $ref: '#/components/responses/NotFound'

    # -----------------------------------------------------
    # PATCH groups/{id} - Update a Group
    # -----------------------------------------------------
    patch:
      tags:
        - groups
      summary: Update a Group
      description: >
        Update a Group resource.
      security:
        - AuthClient: []
        - AuthClientForwardedUser: []
        - ApiKey: []
      requestBody:
          description: Properties to update in Group resource
          required: true
          content:
            application/*json:
              schema:
                $ref: '#/components/schemas/GroupUpdate'

      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'

    # ---------------------------------------------------------------------
    # PUT groups/{id} - Replace (Create or Update) a Group, a.k.a. "upsert"
    # ---------------------------------------------------------------------
    put:
      tags:
        - groups
      summary: Create or Update a Group
      description: >
        Update the group with the indicated `id` or create one if it does
        not exist.
      security:
          - ApiKey: []
          - AuthClientForwardedUser: []
      requestBody:
          description: Full representation of Group resource
          required: true
          content:
            application/*json:
              schema:
                $ref: '#/components/schemas/GroupCreate'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'

  # ---------------------------------------------------------------------------
  # Operations on the currently-authenticated user (Profile)
  # ---------------------------------------------------------------------------
  /profile:

    # -----------------------------------------------------
    # GET profile - Retrieve user profile
    # -----------------------------------------------------
    get:
      tags:
        - profile
      summary: Fetch user's profile
      description: >
        Fetch profile information for the currently-authenticated user.
      security:
        - ApiKey: []
        - {} # Unauthenticated OK
      responses:
        '200':
          description: Success
          content:
            application/*json:
              schema:
                $ref: '#/components/schemas/Profile'

  /profile/groups:
    # -------------------------------------------------------------
    # GET user's groups - Retrieve groups for currently auth'd user
    # -------------------------------------------------------------
    get:
      tags:
        - profile
      summary: Fetch user's groups
      description: >
        Fetch the groups for which the currently-authenticated user is a member.
      security:
        - ApiKey: []
        - {} # Unauthenticated OK
      responses:
        '200':
          description: Success
          content:
            application/*json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'


  # ---------------------------------------------------------------------------
  # Operations on User Collections
  # ---------------------------------------------------------------------------
  /users:

    post:
      tags:
        - users
      summary: Create a new user
      description: >
        Create a new user within the client's associated authority.
      security:
        - AuthClient: []

      requestBody:
          description: Full representation of User resource
          required: true
          content:
            application/*json:
              schema:
                $ref: '#/components/schemas/UserCreate'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '409':
          $ref: '#/components/responses/Conflict'

  # ---------------------------------------------------------------------------
  # Operations on single User Resources
  # ---------------------------------------------------------------------------
  /users/{username}:

    patch:
      tags:
        - users
      summary: Update a user
      description: >
        Update an existing user.
      security:
        - AuthClient: []

      parameters:
        - $ref: '#/components/parameters/Username'
      requestBody:
          description: Properties to update in the User resource
          required: true
          content:
            application/*json:
              schema:
                $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
